name: 'General - PR Core Link Checker'

on:
  workflow_call:
    inputs:
      mkdocs_repo:
        required: true
        type: string
      docs_repo:
        required: true
        type: string
      docs_checkout:
        required: true
        type: string
      url:
        required: true
        type: string
        description: 'The base URL of the deployed docs site (e.g., https://docs.tanssi.network)'
    secrets:
      GH_TOKEN:
        required: true

jobs:
  check-links:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Derive repository names from inputs for use in later steps
      - name: 'Set up workflow variables'
        id: vars
        run: |
          echo "mkdocs_repo_name=$(basename ${{ inputs.mkdocs_repo }})" >> $GITHUB_OUTPUT
          echo "docs_repo_name=$(basename ${{ inputs.docs_repo }})" >> $GITHUB_OUTPUT
          echo "docs_checkout_path=$(basename ${{ inputs.docs_checkout }})" >> $GITHUB_OUTPUT

      # Step 2: Checkout the MkDocs and Docs repositories
      - name: 'Checkout MkDocs Repo'
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.mkdocs_repo }}
          path: ${{ steps.vars.outputs.mkdocs_repo_name }}

      - name: 'Checkout Docs Repo into MkDocs'
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.docs_repo }}
          path: ${{ steps.vars.outputs.mkdocs_repo_name }}/${{ steps.vars.outputs.docs_checkout_path }}
          ref: ${{ github.event.pull_request.head.ref }}
      
      # Step 3: Use a dedicated action to reliably find newly added files
      - name: 'Find new documentation files'
        id: added_files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.md
            **/*.ipynb
          files_filter: 'A' # Filter for 'A'dded files only
          working_directory: ${{ steps.vars.outputs.mkdocs_repo_name }}/${{ steps.vars.outputs.docs_repo_name }}

      # Step 4: Set up Python and install dependencies
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '${{ steps.vars.outputs.mkdocs_repo_name }}/requirements.txt'

      - name: 'Install dependencies'
        working-directory: ${{ steps.vars.outputs.mkdocs_repo_name }}
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Build the MkDocs site
      - name: 'Build MkDocs site'
        working-directory: ${{ steps.vars.outputs.mkdocs_repo_name }}
        run: mkdocs build -d site

      # Step 6: Consolidate all argument preparation into one script
      - name: 'Prepare all lychee arguments'
        id: lychee_args
        env:
          ADDED_FILES: ${{ steps.added_files.outputs.added_files }}
          MKDOCS_REPO_NAME: ${{ steps.vars.outputs.mkdocs_repo_name }}
          BASE_URL: ${{ inputs.url }}
        run: |
          # Start with base arguments
          ARGS="--root-dir ${{ github.workspace }}/${MKDOCS_REPO_NAME}/site --no-progress --accept 429,403"

          # Add .urlignore file if it exists
          URLIGNORE_PATH="${{ github.workspace }}/${MKDOCS_REPO_NAME}/.urlignore"
          if [[ -f "$URLIGNORE_PATH" ]]; then
            echo "Found .urlignore file. Adding to lychee arguments."
            ARGS="$ARGS --exclude-file $URLIGNORE_PATH"
          fi

          # Loop through added files (if any) and generate exclusion URLs
          if [[ -n "$ADDED_FILES" ]]; then
            echo "ðŸ”— Excluding URLs for new pages found in this PR:"
            for file in $ADDED_FILES; do
              URL_PATH=$(echo "$file" | sed -e 's/^docs\///' -e 's/index\.\(md\|ipynb\)$//' -e 's/\.\(md\|ipynb\)$//')
              EXCLUDED_URL="${BASE_URL}/${URL_PATH}/"
              
              echo "  ðŸš« $file â†’ $EXCLUDED_URL"
              ARGS="$ARGS --exclude $EXCLUDED_URL"
            done
          else
            echo "âœ… No new pages to exclude."
          fi

          # Append the final target glob pattern for lychee to scan
          ARGS="$ARGS '${{ github.workspace }}/${MKDOCS_REPO_NAME}/site/**/*.html'"

          echo "args=$ARGS" >> $GITHUB_OUTPUT

      # Step 7: Run the link checker with the fully prepared arguments
      - name: 'Run Link Checker (lychee)'
        uses: lycheeverse/lychee-action@v2.4.1
        with:
          args: ${{ steps.lychee_args.outputs.args }}
          fail: true
