name: 'General - PR Core Link Checker'

on:
  workflow_call:
    inputs:
      mkdocs_repo:
        required: true
        type: string
      docs_repo:
        required: true
        type: string
      docs_checkout:
        required: true
        type: string
      url:
        required: true
        type: string
        description: 'The base URL of the deployed docs site (e.g., https://docs.tanssi.network)'
    secrets:
      GH_TOKEN:
        required: true

jobs:
  check-links:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Derive repository names from inputs for use in later steps
      - name: 'Set up workflow variables'
        id: vars
        run: |
          echo "mkdocs_repo_name=$(basename ${{ inputs.mkdocs_repo }})" >> $GITHUB_OUTPUT
          echo "docs_repo_name=$(basename ${{ inputs.docs_repo }})" >> $GITHUB_OUTPUT
          echo "docs_checkout_path=$(basename ${{ inputs.docs_checkout }})" >> $GITHUB_OUTPUT

      # Step 2: Checkout the MkDocs and Docs repositories
      - name: 'Checkout MkDocs Repo'
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.mkdocs_repo }}
          path: ${{ steps.vars.outputs.mkdocs_repo_name }}

      - name: 'Checkout Docs Repo into MkDocs'
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.docs_repo }}
          path: ${{ steps.vars.outputs.mkdocs_repo_name }}/${{ steps.vars.outputs.docs_checkout_path }}
          ref: ${{ github.event.pull_request.head.ref }}

      # Step 3: Set up Python and install dependencies
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '${{ steps.vars.outputs.mkdocs_repo_name }}/requirements.txt'

      - name: 'Install dependencies'
        working-directory: ${{ steps.vars.outputs.mkdocs_repo_name }}
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Build the MkDocs site
      - name: 'Build MkDocs site'
        working-directory: ${{ steps.vars.outputs.mkdocs_repo_name }}
        run: mkdocs build -d site

      # Step 5: Detect documentation file changes (added, modified, renamed)
      - name: 'Detect documentation file changes'
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.md
            **/*.ipynb
          # No files_filter to get all changes (A=added, M=modified, D=deleted, R=renamed)
          working_directory: ${{ steps.vars.outputs.mkdocs_repo_name }}/${{ steps.vars.outputs.docs_checkout_path }}

      # Step 6: Handle link checking for changed files
      - name: 'Handle link checking for changed files'
        id: link_checking
        env:
          ADDED_FILES: ${{ steps.changed_files.outputs.added_files }}
          MODIFIED_FILES: ${{ steps.changed_files.outputs.modified_files }}
          RENAMED_FILES: ${{ steps.changed_files.outputs.renamed_files }}
          MKDOCS_REPO_NAME: ${{ steps.vars.outputs.mkdocs_repo_name }}
          BASE_URL: ${{ inputs.url }}
        run: |
          # Validate required environment variables
          if [[ -z "$BASE_URL" ]]; then
            echo "❌ Error: BASE_URL is not set"
            exit 1
          fi

          # Function to convert file path to URL path
          convert_to_url_path() {
            local file="$1"
            # Remove docs/ prefix, handle index files, and remove extensions
            echo "$file" | sed -e 's/^docs\///' -e 's/index\.\(md\|ipynb\)$//' -e 's/\.\(md\|ipynb\)$//' | sed 's/\/$//'
          }

          # Build exclude arguments for lychee
          EXCLUDE_ARGS=""

          # Handle added files (exclude from link checking)
          if [[ -n "$ADDED_FILES" ]]; then
            echo "🔗 Excluding URLs for new pages found in this PR:"
            for file in $ADDED_FILES; do
              URL_PATH=$(convert_to_url_path "$file")
              EXCLUDED_URL="${BASE_URL}/${URL_PATH}/"
              
              echo "  🚫 $file → $EXCLUDED_URL"
              EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude $EXCLUDED_URL"
            done
          fi

          # Handle modified files (exclude from link checking as they may have broken links)
          if [[ -n "$MODIFIED_FILES" ]]; then
            echo "🔗 Excluding URLs for modified pages found in this PR:"
            for file in $MODIFIED_FILES; do
              URL_PATH=$(convert_to_url_path "$file")
              EXCLUDED_URL="${BASE_URL}/${URL_PATH}/"
              
              echo "  🚫 $file → $EXCLUDED_URL"
              EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude $EXCLUDED_URL"
            done
          fi

          # Handle renamed files (exclude both old and new URLs)
          if [[ -n "$RENAMED_FILES" ]]; then
            echo "🔗 Excluding URLs for renamed pages found in this PR:"
            for file in $RENAMED_FILES; do
              # For renamed files, we need to handle the old and new paths
              # The renamed_files output contains "old_path -> new_path" format
              # Use a more robust parsing method that handles spaces in filenames
              OLD_PATH=$(echo "$file" | sed 's/ -> .*$//')
              NEW_PATH=$(echo "$file" | sed 's/^.* -> //')
              
              if [[ -n "$OLD_PATH" && -n "$NEW_PATH" ]]; then
                OLD_URL_PATH=$(convert_to_url_path "$OLD_PATH")
                NEW_URL_PATH=$(convert_to_url_path "$NEW_PATH")
                
                OLD_EXCLUDED_URL="${BASE_URL}/${OLD_URL_PATH}/"
                NEW_EXCLUDED_URL="${BASE_URL}/${NEW_URL_PATH}/"
                
                echo "  🚫 $OLD_PATH → $OLD_EXCLUDED_URL"
                echo "  🚫 $NEW_PATH → $NEW_EXCLUDED_URL"
                EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude $OLD_EXCLUDED_URL"
                EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude $NEW_EXCLUDED_URL"
              else
                echo "  ⚠️  Warning: Could not parse renamed file entry: $file"
              fi
            done
          fi

          # If no changed files, show a message
          if [[ -z "$ADDED_FILES" && -z "$MODIFIED_FILES" && -z "$RENAMED_FILES" ]]; then
            echo "✅ No documentation files were changed in this PR."
          fi

          echo "exclude_args=$EXCLUDE_ARGS" >> $GITHUB_OUTPUT

      # Step 7: Prepare lychee arguments
      - name: 'Prepare lychee arguments'
        id: lychee_args
        env:
          MKDOCS_REPO_NAME: ${{ steps.vars.outputs.mkdocs_repo_name }}
          EXCLUDE_ARGS: ${{ steps.link_checking.outputs.exclude_args }}
        run: |
          # Start with base arguments
          ARGS="--root-dir ${{ github.workspace }}/${MKDOCS_REPO_NAME}/site --no-progress --accept 429,403"

          # Add .urlignore file if it exists
          URLIGNORE_PATH="${{ github.workspace }}/${MKDOCS_REPO_NAME}/.urlignore"
          if [[ -f "$URLIGNORE_PATH" ]]; then
            echo "Found .urlignore file. Adding to lychee arguments."
            ARGS="$ARGS --exclude-file $URLIGNORE_PATH"
          fi

          # Add exclude arguments from changed files
          if [[ -n "$EXCLUDE_ARGS" ]]; then
            echo "Adding exclude arguments for changed files: $EXCLUDE_ARGS"
            ARGS="$ARGS $EXCLUDE_ARGS"
          fi

          # Append the final target glob pattern for lychee to scan
          ARGS="$ARGS '${{ github.workspace }}/${MKDOCS_REPO_NAME}/site/**/*.html'"

          echo "args=$ARGS" >> $GITHUB_OUTPUT

      # Step 8: Run the link checker
      - name: 'Run Link Checker (lychee)'
        uses: lycheeverse/lychee-action@v2.4.1
        with:
          args: ${{ steps.lychee_args.outputs.args }}
          fail: true
